from .<%= @mda.basename %>_conversions import *

<% @mda.all_plain_disciplines.each do |disc| %>
class <%= disc.camelname %>Proxy():
    def __init__(self, thrift_client=None):
        super(<%= disc.camelname %>Proxy, self).__init__()
        self._thrift_client = thrift_client
        
    def compute(self, inputs, outputs):
        output = self._thrift_client.compute_<%= disc.snake_modulename %>(to_thrift_<%= disc.snake_modulename %>_input(inputs))
        to_openmdao_<%= disc.snake_modulename %>_outputs(output, outputs)
<% end %>

    