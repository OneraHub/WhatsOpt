# DO NOT EDIT unless you know what you are doing
# analysis_id: <%= @mda.id %>

import sys
import numpy as np
import matplotlib.pyplot as plt
from run_parameters_init import initialize

from openmdao.api import Problem, SqliteRecorder, CaseReader
from openmdao_extensions.salib_doe_driver import SalibDOEDriver

from SALib.analyze import morris
from SALib.analyze import sobol
from SALib.plotting import morris as mp
from SALib.plotting.bar import plot as barplot
<% if @remote -%>
from <%= @server_module %>.<%= @mda.py_modulename %>_proxy import <%= @mda.py_classname %>Proxy as <%= @mda.py_classname %> 
<% else -%>
from <%= @mda.py_modulename %> import <%= @mda.py_classname %> 
<% end %>

from optparse import OptionParser
parser = OptionParser()
parser.add_option("-b", "--batch",
                  action="store_true", dest="batch", default=False,
                  help="do not plot anything")
parser.add_option("-s", "--sobol",
                  action="store_true", dest="sobol", default=False,
                  help="do not plot anything")
parser.add_option("-p", "--parallel", 
                  action="store_true", default=False,
                  help="run doe in parallel")
(options, args) = parser.parse_args()

pb = Problem(<%= @mda.py_classname %>())
sa_method_name='Morris'
sa_doe_options={'n_trajs': 10, 'n_levels': 4}
if options.sobol:
    sa_method_name='Sobol'
    sa_doe_options={'n_samples': 500, 'calc_second_order': False}

pb.driver = SalibDOEDriver(sa_method_name=sa_method_name, sa_doe_options=sa_doe_options)
pb.driver.options['run_parallel'] = options.parallel

case_recorder_filename = '<%= @sqlite_filename %>'        
recorder = SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)

pb.model.nonlinear_solver.options['err_on_non_converge'] = True

<%- @mda.design_variables.each do |dv| %>
pb.model.add_design_var('<%= dv.name %>', lower=<%= dv.lower_py_value %>, upper=<%= dv.upper_py_value %>)<% end %>
<% if @mda.objective_variables.size > 0 || @mda.responses_of_interest.size > 0 %>
<% @mda.min_objective_variables.each do |voi| %>
pb.model.add_objective('<%= voi.name %>')<% end %>
<% @mda.max_objective_variables.each do |voi| %>
pb.model.add_objective('<%= voi.name %>', scaler=-1.)<% end %>
<% @mda.ineq_constraint_variables.each do |voi| %>
pb.model.add_constraint('<%= voi.name %>', upper=0.)<% end %>
<% @mda.eq_constraint_variables.each do |voi| %>
pb.model.add_constraint('<%= voi.name %>', equals=0.)<% end %>
<% @mda.responses_of_interest.each do |voi| %>
pb.model.add_objective('<%= voi.name %>')<% end %>
<% else %>
<% @mda.response_variables.each do |voi| %>
pb.model.add_objective('<%= voi.name %>')<% end %>
<% end %>
pb.setup()  
initialize(pb)

pb.run_driver()        

<% if @mda.response_variables.size < 10 %>
if options.batch  or options.parallel:
    exit(0)
reader = CaseReader(case_recorder_filename)
cases = reader.list_cases('driver', recurse=False)
n = len(cases)
data = {'inputs': {}, 'outputs': {} }
<% @mda.design_variables.each do |dv| -%>
data['inputs']['<%= dv.name %>'] = np.zeros((n,)+<%= dv.shape=="1"?"(1,)":dv.shape %>)
<% end -%>
<% @mda.response_variables.each do |r| -%>
data['outputs']['<%= r.name %>'] = np.zeros((n,)+<%= r.shape=="1"?"(1,)":r.shape %>)
<% end -%>

for i in range(len(cases)):
    case = reader.get_case(cases[i])
<% @mda.design_variables.each do |dv| -%>
    data['inputs']['<%= dv.name %>'][i,:] = case.outputs['<%= dv.name %>']
<% end -%>
<% @mda.response_variables.each do |r| -%>
    data['outputs']['<%= r.name %>'][i,:] = case.outputs['<%= r.name %>']
<% end -%>

salib_pb = pb.driver.get_salib_problem()
inputs = pb.driver.get_cases()

<% @mda.response_variables.each_with_index do |r, j| -%>
print('')
print('*** Output: <%= r.name %>')
output = data['outputs']['<%= r.name %>'].reshape((-1,))

if options.sobol:  
    Si = sobol.analyze(salib_pb, output, 
                       calc_second_order=sa_doe_options['calc_second_order'], 
                       print_to_console=True)
    Si_df = Si.to_df()
    fig, axes = plt.subplots(1, len(Si_df))
    for idx, f in enumerate(Si_df):
        axes[idx] = barplot(f, ax=axes[idx])
    fig.suptitle('<%= r.name %> '+'sensitivity')

else:
    Si = morris.analyze(salib_pb, inputs, output, print_to_console=True)

    fig, (ax1, ax2) = plt.subplots(1,2)
    fig.suptitle('<%= r.name %> '+'sensitivity')

    mp.horizontal_bar_plot(ax1, Si, {})
    mp.covariance_plot(ax2, Si, {})

<% end -%>
  
plt.show()
<% end %>
