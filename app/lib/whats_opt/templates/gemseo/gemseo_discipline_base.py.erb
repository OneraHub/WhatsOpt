<%= @generator.render_partial('base_header_partial.py.erb') %>

import numpy as np
from numpy import nan
from os import path
from importlib import import_module
from yaml import load, FullLoader
from gemseo.core.discipline import MDODiscipline
from gemseo.core.json_grammar import JSONGrammar

class <%= @discipline.py_classname %>Base(MDODiscipline):
    """ An GEMSEO discipline to encapsulate <%= @discipline.py_classname %> discipline """

    def __init__(self, **kwargs):
        self.comp_dir = "./"
        super(<%= @discipline.py_classname %>Base, self).__init__(grammar_type=MDODiscipline.SIMPLE_GRAMMAR_TYPE, **kwargs)
        self._initialize_impl()


    def _instantiate_grammars(self, input_grammar_file, output_grammar_file, grammar_type=MDODiscipline.JSON_GRAMMAR_TYPE):
        self.default_inputs = {
        <% @discipline.input_variables.each do |var| %>
            '<%= var.py_varname %>': <%= var.init_py_value %>,<% end -%>
        }
        self.default_outputs = {
        <% @discipline.output_variables.each do |var| %>
            '<%= var.py_varname %>': <%= var.init_py_value %>,<% end -%>
        }
        self.input_grammar = JSONGrammar("<%= @discipline.py_classname %>")
        self.input_grammar.initialize_from_base_dict(self.default_inputs)
        self.output_grammar = JSONGrammar("<%= @discipline.py_classname %>")
        self.output_grammar.initialize_from_base_dict(self.default_outputs)

    def _initialize_impl(self):
        self._impl = None
        dockconf = path.join(path.dirname(__file__), ".whatsopt_dock.yml")
        if path.exists(dockconf):
            with open(dockconf) as dockfile:
                dock = load(dockfile, Loader=FullLoader)
                impl = dock.get("<%= @discipline.py_modulename %>")
                if impl:
                    module = import_module(impl['module'])
                    self._impl = getattr(module, impl['class'])()


    def _run(self):
    <% @discipline.input_variables.each do |var| %>
        <%= var.py_varname %> = self.get_inputs_by_name(["<%= var.py_varname %>"])
    <% end -%>

        inputs = self.local_data
        outputs = {}
        self.compute(inputs, outputs)
    <% @discipline.output_variables.each do |var| %>
        self.store_local_data(<%= var.py_varname %>=np.array(outputs["<%= var.py_varname %>"]))<% end -%>
